?predict.lm
summary(mtcars.lm)
predict(mtcars.lm, newdata = data.frame(wt = 2), interval = "confidence")
mtcar$coefficients
mtcars.lm$coefficients
mtcars.lm$coefficients[2]
mtcars.lm$coefficients[2] * 2
summCoef <- mtcars.lm$coefficients
summCoef
summary(mtcars.lm)
summary(mtcars.lm)$coefficients
summCoef <- summary(mtcars.lm)$coefficients
summCoef[2,1] * 2 + summCoef[1,1]
summCoef[2,1] * 2
summCoef[2,1] * 2 - summCoef[2,2]
plot(mtcars$mpg, mtcars$wt)
abline(mtcars.lm)
abline(fit(mtcars.lm))
mtcars.lm <- lm(mpg ~ wt, data = mtcars)
abline(mtcars.lm)
abline(lm(mpg ~ wt, data = mtcars))
plot(mtcars$mpg, mtcars$wt)
abline(lm(mpg ~ wt, data = mtcars))
fit <- lm(mpg ~ wt, data = mtcars)
abline(fit)
abline(fit, lwd = 2)
plot(wt ~ mpg, ddata = mtcars)
plot(wt ~ mpg, data = mtcars)
abline(fit)
plot(wt ~ mpg, data = mtcars)
abline(mtcars.lm)
plot(mpg ~ wt, data = mtcars)
abline(mtcars.lm)
mtcars2.lm <- lm(mpg ~ wt + 0, data = mtcars)
abline(mtcars2.lm)
summary(mtcars.lm)
mtcars2.lm <- lm(mpg ~ I(wt/2), data = mtcars)
summary(mtcars2.lm)
summary(mtcars2.lm)$coefficients
summCoef <- summary(mtcars2.lm)$coefficients
summCoef[2,1] - summCoef[2,2]
summCoef[2,1] - 2*summCoef[2,2]
summCoef[2,1] + summCoef[2,2]
newdata = data.frame(wt = mean(mtcars$wt))
predict(mtcars2.lm, newdata, interval = "confidence")
summary(mtcars.lm)
summary(mtcars.lm)$coefficients[1,1]
beta0 <- summary(mtcars.lm)$coefficients[1,1]
beta1 <- summary(mtcars.lm)$coefficients[2,1]
e <- mtcars$mpg - beta0 - beta1 * mtcars$wt
n <- length(mtcars$mpg)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((mtcars$wt - mean(mtcars$wt)^2))
seBeta0 <- (1/n + mean(mtcars$wt)^2 / ssx) ^.5*sigma
seBeta1 <- sigma / sqrt(ssx)
ssx
sum(e^2)
sum(e^2)/(n-2)
ssx <- sum((mtcars$wt - mean(mtcars$wt))^2)
seBeta0 <- (1/n + mean(mtcars$wt)^2 / ssx) ^.5*sigma
seBeta1 <- sigma / sqrt(ssx)
sseBeta1
ssBeta1
seBeta1
summary(mtcars.lm)
mtcars2.lm <- lm(mpg ~ 1, data = mtcars)
summary(mtcars2.lm)
resid(mtcars.lm)
resid(mtcars.lm)^2
sum(resid(mtcars.lm)^2)
sum(resid(mtcars2.lm)^2)
sum(resid(mtcars2.lm)^2)/sum(resid(mtcars.lm)^2)
xi <- mtcars$wt
xi
summCoef
summCoef[1,1] + summCoef[2,1] * xi
sum((mtcars$mpg - (summCoef[1,1] + summCoef[2,1] * xi))^2)
sum((mtcars$mpg - (summary(mtcars2.lm)$coefficients[1,1] + summary(mtcars2.lm)$coefficients[2,1] * xi))^2)
sum((mtcars$mpg - (summary(mtcars2.lm)$coefficients[1,1])^2)
)
sum((mtcars$mpg - summary(mtcars2.lm)$coefficients[1,1])^2)
10586.88/1126.047
yi <- mtcars$mpg
summCoef
(yi - (summCoef[1,1] + summCoef[2,1] * xi))
summary(mtcars.lm)$coefficients
summCoef <- summary(mtcars.lm)$coefficients
(yi - (summCoef[1,1] + summCoef[2,1] * xi))
sum((yi - summary(mtcars2.lm)$coefficients[1,1])^2)
sum((mtcars$mpg - (summCoef[1,1] + summCoef[2,1] * xi))^2)
summary(mtcars.lm)
summary(mtcars2.lm)
summary(mtcars.lm)
mtcars3.lm <- lm(wt ~ I(mpg/2), data = mtcars)
summary(mtcars3.lm)
mtcars3.lm <- lm(mpg ~ I(wt/2), data = mtcars)
summary(mtcars3.lm)
summary(mtcars.lm)
summary(mtcars3.lm)
summary(mtcars2.lm)$coefficients[2,1] + 1.96 * summary(mtcars3.lm)$coefficients[2,2] * c(-1,1)
summary(mtcars3.lm)$coefficients[2,1] + 1.96 * summary(mtcars3.lm)$coefficients[2,2] * c(-1,1)
sum(resid(mtcars.lm)^2)/sum(resid(mtcars2.lm)^2)
mtcars.lm <- lm(mpg ~ wt; data = mtcars)
mtcars.lm <- lm(mpg ~ wt, data = mtcars)
mtcars2.lm <- lm(mpg ~ wt + cyl, data = mtcars)
summary(mtcars.lm)
summary(mtcars2.lm)
summary(mtcars2.lm)$coefficients[3,1]
1/summary(mtcars2.lm)$coefficients[3,1]
summary(mtcars2.lm)$coefficients[3,1] * 8
summary(mtcars2.lm)$coefficients[3,1] * 4
summary(mtcars2.lm)$coefficients[3,1] * (4-8)
summary(mtcars)
str(mtcars)
mtcars.lm <- lm(mpg ~ cyl, data = mtcars)
mtcars2.lm <- lm(mpg ~ cyl + wt, data = mtcars)
summary(mtcars.lm)
summary(mtcars2.lm)
mtcars.lm <- lm(mpg ~ cyl + wt, data = mtcars)
mtcars2.lm <- lm(mpg ~ cyl * wt, data = mtcars)
summary(mtcars.lm)
summary(mtcars2.lm)
mtcars2.lm <- lm(mpg ~ cyl + wt + cyl * wt, data = mtcars)
summary(mtcars.lm)
summary(mtcars2.lm)
mtcars2.lm <- lm(mpg ~ cyl + wt + cyl : wt, data = mtcars)
summary(mtcars.lm)
summary(mtcars2.lm)
mtcars3.lm <- lm(mpg ~ cyl * wt, data = mtcars)
summary(mtcars3.lm)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y,x)
fit <- lm(y~x)
round(dfbetas(fit))
round(hatvalues((fit)))
plot(x,y)
hatvalues((fit))
?hatvalues
dfbetas(fit)
mtcars.lm <- lm(mpg ~ factor(cyl) + weight, data = mtcars)
mtcars.lm <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(mtcars.lm)
summary(mtcars.lm)$coefficients[2,1] - summary(mtcars.lm)$coefficients[3,1]
mtcars2.lm <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(mtcars.lm, mtcars2.lm)
summary(mtcars.lm)
summary(mtcars2.lm)
?aov
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
setwd("~/R/RegressionModels")
data(mtcars)
str(mtcars)
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data = galton)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(sTot)
sRes <- deviance(galton$child)
?deviance
deviance()
deviance(sTot, sRes)
test
?
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent, galton$child)
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ .,data = swiss)
all <- lm(Fertility ~ .,data = swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education, data=swiss)
cor(swiss$Education, swiss$Examination)
cor(swiss$Agriculture, swiss$Education)
makelms
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- (swiss$Examination + swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
summary(all)$coefficients - summary(efit)$coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sA
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(InsectSprays,classes)
sapply(InsectSprays,class(x))
class(InsectSprays)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[ ,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit$coefficients
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female",])
lmF <- lm(Numeric[Sex == "Female"] ~ Year[Sex == "Female"], hunger)
lmM <- lm(Numeric[Sex == "Male"] ~ Year[Sex == "Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, wwhich = 1)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, wwhich = 1)
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/resid(fit)$df)
sigma <- sqrt(deviance(fit)/resid(fit))
sigma <- sqrt(deviance(fit)/df.resid(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/ (sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit,out2)
sum(dy^2) / (2*sigma^2)
plot(fit, which = 5)
data(shuttle)
library(MASS)
data(shuttle)
?shuttle
str(shuttle)
levels(shuttle$use)
mdl <- glm(use ~ wind, family = binomial, data = shuttle)
summary(mdl)
levels(shuttle$wind)
head(shuttle$wind)
exp(mdl$coefficients)
exp(confint(mdl))
beta0 <- exp(mdl$coefficients)[1]
beta1 <- exp(mdl$coefficients)[2]
summary(shuttle)
?levels
head(shuttle$wind)
str(shuttle)
probhead <- exp(beta0 + beta1*1)/(1+exp(beta0 + beta1*1))
probhead <- 1/(1+exp(-(beta0+beta1*1)))
probhead <- 1/(1+exp(-(beta0+beta1*2)))
probhead <- 1/(1+exp(-(beta0+beta1*1)))
probtail <- 1/(1+exp(-(beta0+beta1*2)))
probhead / probtail
round(exp(cbind(Estimate = coef(mdl),confint(mdl))),2)
mdl <- glm(use ~ wind + magn, family = binomial, data = shuttle)
mdl2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
mdl <- glm(use ~ wind, family = binomial, data = shuttle)
round(exp(cbind(Estimate = coef(mdl2),confint(mdl2))),2)
levels(shuttle$magn)
summary(mdl2)
exp(coef(mdl2))
exp(coef(mdl1))
exp(coef(mdl))
(beta0 + beta1)/beta0
exp(beta0 + beta1)/exp(beta0)
mdl$coefficients
mdl$coefficients[1]
beta0 <- mdl$coefficients[1]
beta1 <- mdl$coefficients[2]
exp(beta0 + beta1)/exp(beta0)
summary(mdl2)
exp(coef(mdl2))
InsectSprays
Insectmdl <- glm(count ~ spray, family = poisson, data = InsectSprays)
summary(Insectmdl)
Insectmdl$coefficients[1,1]
Insectmdl$coefficients[1]/Insectmdl$coefficients[2]
log(10)
exp(log(10))
Insectmdl <- glm(count ~ spray - 1, family = poisson, data = InsectSprays)
summary(Insectmdl)
Insectmdl$coefficients[1]/Insectmdl$coefficients[2]
exp(Insectmdl$coefficients[1])/exp(Insectmdl$coefficients[2])
mdlx <- glm(use ~ wind + magn, family = binomial, data = shuttle)
lodds <- predict(mdlx, data.frame(wind = shuttle$wind, magn = shuttle$magn))
lodds
summary(lodds)
summar9mdl
summary(mdl)
predict(mdl, data.frame(wind = c("head", "tail")))
predict(mdlx, data.frame(wind = c("head", "tail", levels(shuttle$magn))))
predict(mdlx, data.frame(wind = c("head", "tail"), magn = levels(shuttle$magn))))
predict(mdlx, data.frame(wind = c("head", "tail"), magn = levels(shuttle$magn)))
predict(mdl, data.frame(wind = levels(shuttle$wind)))
predict(mdlx, data.frame(wind = levels(shuttle$wind), magn = levels(shuttle$magn)))
levels(shuttle$magn)
predict(mdlx, data.frame(wind = levels(shuttle$wind), magn = levels(shuttle$magn)))
lodds <- predict(mdlx, data.frame(wind = levels(shuttle$wind), magn = levels(shuttle$magn)))
lodds[1]/lodds[2]
exp(lodds[1])/exp(lodds[2])
summary(mdlx)
data.frame(wind = levels(shuttle$wind), magn = levels(shuttle$magn))
data.frame(magn = levels(shuttle$magn), wind = levels(shuttle$wind))
summary(shuttle)
str(shuttle)
head(shuttle)
mdl
mdl2
exp(mdl$coefficients[1])/exp(mdl$coefficients[2])
exp(mdl$coefficients[2])
exp(mdl2$coefficients[2])
shuttle$use
1-shuttle$use
1(1-shuttle$use)
shutdata <- mutate(shuttle, useAuto = as.integer(use == "auto"))
shutdata <- mutate(shutdata, windHead = as.integer(wind == "head"))
?mutate
??mutate
library(dplyr)
shutdata <- mutate(shuttle, useAuto = as.integer(use == "auto"))
shutdata <- mutate(shutdata, windHead = as.integer(wind == "head"))
shutdata
head(shutdata)
mdltest <- glm(useAuto ~ windHead, binomial, shuttle)
mdltest <- glm(useAuto ~ windHead, binomial, shutdata)
mdltest
mdl
mdltest <- glm((1-useAuto) ~ windHead, binomial, shutdata)
mdltest
mdltest <- glm(I(1-useAuto) ~ windHead, binomial, shutdata)
mdltest
install.packages("caret")
library("caret")
set.seed(1)
inTrain <- createDataPartition(mutagen, p = 3/4, list = FALSE)
data(mutagen)
data("mutagen")
install.packages("mutagen")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
setwd("~/R/MachineLearning")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
summary(training$Superplasticizer)
str(training$Superplasticizer)
type(training$Superplasticizer)
var(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
grep("^IL", training)
names(training)
grep("^IL", names(training))
indexOfIL <- grep("^IL", names(training))
indexOfIL
training[, indexOfIL]
data("iris")
str(iris)
indexOfIL <- grep("^IL", names(training))
trans <- preProcess(training[, indexOfIL], method = "pca")
modelfit <- predict(trans, training[, indexOfIL])
summary(modelfit)
modelfit
names(modelfit)
count(names(modelfit))
dim(modelfit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?predict
modelfit1 <- train(diagnosis ~ ., data = training, method = "glm")
install.packages("e1071")
modelfit1 <- train(diagnosis ~ ., data = training, method = "glm")
warnings()
summary(modelfit)
summary(modelfit1)
predictors[, indexOfIL]
indexOfIL <- grep("^IL", names(training))
newdata = data.frame(diagnosis, predictors[, indexOfIL])
predictors[, indexOfIL]
newTrain = createDataPartition(newdata$diagnosis, p = 3/4)[[1]]
training = newdata[newTrain, ]
testing = newdata[-newTrain, ]
modelfit1 <- train(diagnosis ~ ., data = training, method = "glm")
summary(modelfit1)
prediction1 <- predict(modelfit1, newdata = testing)
summary(prediction1)
prediction1
confusionMatrix(prediction1, testing$diagnosis)
?train
trans <- preProcess(training[, indexOfIL], method = "pca", thresh = 0.8)
modelfit2 <- train(diagnosis ~ ., data = training, method = "glm", preProcess(training[, indexOfIL], method = "pca", thresh = 0.8))
prediction2 <- predict(modelfit2, newdata = testing)
confusionMatrix(prediction2, testing$diagnosis)
indexOfIL <- grep("^IL", names(training))
modelfit2 <- train(diagnosis ~ ., data = training, method = "glm", preProcess(training[, indexOfIL], method = "pca", thresh = 0.8))
prediction2 <- predict(modelfit2, newdata = testing)
confusionMatrix(prediction2, testing$diagnosis)
modelfit2 <- train(diagnosis ~ ., data = training, preProcess(training[, indexOfIL], method = "pca", thresh = 0.8))
prediction2 <- predict(modelfit2, newdata = testing)
confusionMatrix(prediction2, testing$diagnosis)
modelfit2 <- train(diagnosis ~ ., data = training, method = "glm", preProcess = c("pca", "thresh = 0.8"))
trans <- preProcess(training[, indexOfIL], method = "pca", thresh = 0.8)
modelfit2 <- train(diagnosis ~ .,
data = training,
method = "glm",
preProcess = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
prediction2 <- predict(modelfit2, newdata = testing)
confusionMatrix(prediction2, testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep("^IL", names(training))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
indexOfIL <- grep("^IL", names(training))
c(1, indexOfIL)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
training <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
setInternet2(TRUE)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
setInternet2(TRUE)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", setInternet2(use = TRUE))
setInternet2(NA)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
